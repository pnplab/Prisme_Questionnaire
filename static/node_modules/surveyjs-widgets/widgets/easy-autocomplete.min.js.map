{"version":3,"file":"widgets/easy-autocomplete.min.js","mappings":"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","sources":["webpack://surveyjs-widgets/webpack/universalModuleDefinition","webpack://surveyjs-widgets/webpack/bootstrap","webpack://surveyjs-widgets/webpack/runtime/define property getters","webpack://surveyjs-widgets/webpack/runtime/hasOwnProperty shorthand","webpack://surveyjs-widgets/webpack/runtime/make namespace object","webpack://surveyjs-widgets/./src/easy-autocomplete.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widgets/easy-autocomplete\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widgets/easy-autocomplete\"] = factory();\n\telse\n\t\troot[\"widgets/easy-autocomplete\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","function init(Survey, $) {\n  $ = $ || window.$;\n  var widget = {\n    name: \"autocomplete\",\n    widgetIsLoaded: function () {\n      return typeof $ == \"function\" && !!$.fn.easyAutocomplete;\n    },\n    isFit: function (question) {\n      return question.getType() === \"text\";\n    },\n    isDefaultRender: true,\n    activatedByChanged: function (activatedBy) {\n      if (\n        Survey.JsonObject.metaData.findProperty(\"text\", \"choices\") !== null ||\n        Survey.JsonObject.metaData.findProperty(\"text\", \"choicesByUrl\") !== null\n      ) {\n        return;\n      }\n      Survey.JsonObject.metaData.addProperty(\"text\", {\n        name: \"choices:itemvalues\",\n        category: \"choices\",\n        categoryIndex: 1,\n      });\n      Survey.JsonObject.metaData.addProperty(\"text\", {\n        name: \"choicesByUrl:restfull\",\n        className: \"ChoicesRestfull\",\n        category: \"choicesByUrl\",\n        visible: false,\n        categoryIndex: 2,\n      });\n      Survey.JsonObject.metaData.addProperty(\"text\", {\n        name: \"config\",\n        category: \"general\",\n        default: null,\n      });\n    },\n    afterRender: function (question, el) {\n      var $el = $(el).is(\"input\") ? $(el) : $(el).find(\"input\");\n\n      var getCssSelectorFromClassesString = function (classesString) {\n        if (!classesString) return \"\";\n        var cssSelector = classesString.replace(/(^\\s*)|(\\s+)/g, \".\"); // replace whitespaces with '.'\n        return cssSelector;\n      };\n\n      var questionRootClasses = getCssSelectorFromClassesString(\n        question.cssRoot\n      );\n\n      var questionRoot = $el.parents(questionRootClasses)[0];\n      if (!!questionRootClasses && !!questionRoot) {\n        questionRoot.style.overflow = \"visible\";\n      }\n\n      var config = question.config;\n      var options =\n        config && typeof config == \"string\" ? JSON.parse(config) : config;\n      if (!options) options = {};\n\n      options.data = (question.choices || []).map(function (item) {\n        return item.text;\n      });\n      if (options.adjustWidth === undefined) {\n        options.adjustWidth = false;\n      }\n      if (!options.list) {\n        options.list = {\n          sort: {\n            enabled: true,\n            method: (aStr, bStr) => {\n              const inputStr = $el.val().toLowerCase();\n              const aIndex = aStr.toLowerCase().indexOf(inputStr);\n              const bIndex = bStr.toLowerCase().indexOf(inputStr);\n              return aIndex - bIndex;\n            }\n          },\n          match: {\n            enabled: true,\n          },\n          onChooseEvent: function () {\n            var selectedData = $el.getSelectedItemData();\n            if(!!selectedData && typeof selectedData === \"object\" \n              && !!question.choicesByUrl && !!question.choicesByUrl.valueName) {\n              selectedData = selectedData[question.choicesByUrl.valueName];\n            }\n            question.value = selectedData;\n          },\n        };\n      }\n      if (!options.placeholder) {\n        options.placeholder = question.placeholder;\n      }\n\n      if (!!question.choicesByUrl) {\n        options.url = function (phrase) {\n          return question.choicesByUrl.url;\n        };\n        options.getValue = question.choicesByUrl.valueName;\n        // options.ajaxSettings = {\n        //   dataType: \"jsonp\"\n        // };\n      }\n      $el.easyAutocomplete(options);\n\n      $el[0].oninput = function () {\n        question.customWidgetData.isNeedRender = true;\n      };\n      var updateHandler = function () {\n        $el[0].value =\n          typeof question.value === \"undefined\" ? \"\" : question.value;\n      };\n      question.valueChangedCallback = updateHandler;\n      updateHandler();\n    },\n    willUnmount: function (question, el) {\n      // var $el = $(el).find(\"input\");\n      // $el.autocomplete(\"destroy\");\n    },\n  };\n\n  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, \"type\");\n}\n\nif (typeof Survey !== \"undefined\") {\n  init(Survey, window.$);\n}\n\nexport default init;\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","init","Survey","$","window","widget","name","widgetIsLoaded","fn","easyAutocomplete","isFit","question","getType","isDefaultRender","activatedByChanged","activatedBy","JsonObject","metaData","findProperty","addProperty","category","categoryIndex","className","visible","default","afterRender","el","classesString","$el","is","find","questionRootClasses","cssRoot","replace","questionRoot","parents","style","overflow","config","options","JSON","parse","data","choices","map","item","text","undefined","adjustWidth","list","sort","enabled","method","aStr","bStr","inputStr","val","toLowerCase","indexOf","match","onChooseEvent","selectedData","getSelectedItemData","choicesByUrl","valueName","placeholder","url","phrase","getValue","oninput","customWidgetData","isNeedRender","updateHandler","valueChangedCallback","willUnmount","CustomWidgetCollection","Instance","addCustomWidget"],"sourceRoot":""}